#ENCODED BY : MUMIT ISLAM HIMU
#ENCRYPTION : Py3 MARSHAL+BASE64
#GITHUB : https://github.com/MUMIT-404-CYBER
#----------------------------------------------
import marshal, base64
exec(marshal.loads(base64.b64decode(b'')))